name: CI/CD Pipeline

on:
  workflow_dispatch
  push:
    branches:
      - dev/backend
      - development
      - main
  pull_request:
    branches:
      - dev/backend
      - development
      - main

jobs:
  build-test:
    name: üß™ Build, Migrate, and Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:18
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: mrs
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d mrs"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 10

    env:
      MRS_DB_DSN: postgres://postgres:postgres@localhost:5432/mrs?sslmode=disable

    steps:
      - name: üõé Checkout code
        uses: actions/checkout@v4

      - name: üß∞ Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25"

      - name: üì¶ Install dependencies
        run: go mod download

      - name: üóÑÔ∏è Run database migrations
        uses: docker://migrate/migrate
        with:
          args: >
            -path=/github/workspace/migrations
            -database=${{ env.MRS_DB_DSN }}
            up

      - name: ‚úÖ Run linters
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest

      - name: üß™ Run tests
        run: go test ./... -v

  docker-publish:
    name: üê≥ Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: build-test

    steps:
      - name: üõé Checkout code
        uses: actions/checkout@v4

      - name: üß∞ Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: üê≥ Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            vladgrskkh/mrs-api:latest
            vladgrskkh/mrs-api:${{ github.sha }}

  deploy:
    name: üöÄ Deploy to VPS
    needs: docker-publish
    runs-on: ubuntu-latest

    steps:
      - name: üõé Checkout repo
        uses: actions/checkout@v4

      - name: Create .env on VPS
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            mkdir -p ~/mrs
            echo "MRS_DB_DSND=${{ secrets.MRS_DB_DSN }}" > ~/mrs/.env
            echo "SMTP_USERNAMED=${{ secrets.SMTP_USERNAME }}" >> ~/mrs/.env
            echo "SMTP_PASSWORDD=${{ secrets.SMTP_PASSWORD }}" >> ~/mrs/.env
            echo "MRS_DB_DSN=${{ secrets.POSTGRES_USER }}" > ~/mrs/.env_db
            echo "MRS_DB_DSN=${{ secrets.POSTGRES_PASSWORD }}" >> ~/mrs/.env_db
            echo "MRS_DB_DSN=${{ secrets.POSTGRES_DB }}" >> ~/mrs/.env_db


      - name: üîê Copy files to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "docker-compose.yml"
          target: "~/mrs/"

      - name: üöÄ Deploy via SSH
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd ~/mrs
            docker compose pull
            docker compose down
            docker compose up -d --build
            docker system prune -f
